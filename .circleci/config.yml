version: 2.1
jobs:
  build-push-and-deploy:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Setup VirtualEnv
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=circleci_sensor_fault' >> $BASH_ENV 
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install --no-cache-dir -r requirements.txt
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$TAG .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io
            docker push $DOCKER_USERNAME/$IMAGE_NAME:$TAG
      - add_ssh_keys:
          fingerprints:
            - "dd:bf:de:e1:55:18:ab:be:56:c2:5e:a0:a3:d9:08:df:55:d2:80:a3"
      - run:
          name: write known hosts file
          command: echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
      - run:
          name: Configure SSH Key
          command: |
            echo "$AWS_EC2_SSH_KEY" > ~/.ssh/aws-ec2-key.pem
            chmod 400 ~/.ssh/aws-ec2-key.pem
      - run:
          name: SSH into EC2 instance
          command: |
            ssh -i ~/.ssh/aws-ec2-key.pem ubuntu@ec2-52-66-236-62.ap-south-1.compute.amazonaws.com \
              "mkdir sensor_data" \
              && "docker pull $DOCKER_USERNAME/$IMAGE_NAME:$TAG" \
              && "docker run -it -v /home/ubuntu/sensor_data/:/app/datadir/ -p 8501:8501 $DOCKER_USERNAME/$IMAGE_NAME:$TAG"


      # - run:
      #     name: Deploy to AWS EC2
      #     command: |
      #       # 1- Install AWS CLI
      #       curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
      #       unzip awscli-bundle.zip
      #       ./awscli-bundle/install -b ~/bin/aws
      #       # 2- Get the public IP of the current CircleCI runner
      #       PUBLIC_IP=$(curl ipinfo.io/ip)
      #       # 3- Get AWS Region# TODO Don't forget to replcae by your own Region
      #       AWS_REGION=ap-south-1
      #       # 4- Get SG ID# TODO Don't forget to replace by your own SG ID
      #       SG_ID=sg-0bdf492c8b0118f6d
      #       # 5- Add an ingress rule to the security group
      #       # ~/bin/aws ec2 authorize-security-group-ingress --region $AWS_REGION --group-id $SG_ID \
      #       #   --protocol tcp --port 22 --cidr $PUBLIC_IP/24
      #       # 6- Give the ingress rule some time to propogate
      #       sleep 5
      #       # 7- SSH to the server to deploy
      #       # TODO Change to your username
      #       EC2_USERNAME=ubuntu
      #       # TODO Change to your server's URL or public IP
      #       EC2_PUBLIC_DNS=ec2-13-235-86-127.ap-south-1.compute.amazonaws.com
      #       ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS \
      #       # other commands
      #       # TODO Perform steps to deploy
      #       mkdir sensor_data
      #       docker pull $DOCKER_USERNAME/$IMAGE_NAME:$TAG
      #       docker run -it -v /home/ubuntu/sensor_data/:/app/datadir/ -p 8501:8501 $DOCKER_USERNAME/$IMAGE_NAME:$TAG
      #       # .
      #       # 8- Remove the ingress rule
      #       # ~/bin/aws ec2 revoke-security-group-ingress --region $AWS_REGION --group-id $SG_ID \
      #       #   --protocol tcp --port 22 --cidr $PUBLIC_IP/24
workflows:
  build_test_deploy:
    jobs:
      - build-push-and-deploy

