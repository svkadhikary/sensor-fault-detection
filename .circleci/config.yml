version: 2.1
orbs:
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.1
jobs:
  build-and-push:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Setup VirtualEnv
          command: |
            echo 'export TAG=1.0.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=circleci_sensor_fault' >> $BASH_ENV
            echo 'export MY_APP_PREFIX=sensor_container' >> $BASH_ENV
            echo 'export AWS_REGION=ap-south-1' >> $BASH_ENV
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install --no-cache-dir -r requirements.txt
      - setup_remote_docker:
          docker_layer_caching: true
      # - run:
      #     name: Build and push Docker image
      #     command: |
      #       docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$TAG .
      #       docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io
      #       docker push $DOCKER_USERNAME/$IMAGE_NAME:$TAG
  update-service:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Configure AWS credentials
          command: |
            aws configure set aws_access_key_id AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key AWS_SECRET_ACCESS_KEY
            aws configure set default.region AWS_DEFAULT_REGION
      - run:
          name: Update task definition
          command: |
            aws ecs describe-task-definition --task-definition '${MY_APP_PREFIX}-service' > current-task-definition.json
            OLD_TAG = $(jq -r '.taskDefinition.containerDefinitions[].image | split(":") | .[-1]' current-task-definition.json)
            jq --arg new_tag ${TAG} '.taskDefinition.containerDefinitions[].image |= sub(":$old_tag$", ":\($new_tag)")' --arg old_tag "$OLD_TAG" current-task-definition.json > updated-task-definition.json
            aws ecs register-task-definition --cli-input-json updated-task-definition.json
workflows:
  build_and_deploy:
    jobs:
      - build-and-push
      - update-service:
          requires:
            - build-and-push
          
