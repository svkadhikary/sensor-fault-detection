version: 2.1
orbs:
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-cli: circleci/aws-cli@3.1.1
jobs:
  build-and-push:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Setup VirtualEnv
          command: |
            echo 'export TAG=1.0.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=circleci_sensor_fault' >> $BASH_ENV
            echo 'export MY_APP_PREFIX=sensor_container' >> $BASH_ENV
            echo 'export AWS_REGION=ap-south-1' >> $BASH_ENV
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install --no-cache-dir -r requirements.txt
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$TAG .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD docker.io
            docker push $DOCKER_USERNAME/$IMAGE_NAME:$TAG
  update-service:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - aws-ecs/deploy-service-update: # orb built-in job
          # auth:
          #   - aws-cli/setup:
          #       aws_access_key_id: AWS_ACCESS_KEY_ID
          #       aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          #       region: ${AWS_REGION}
          cluster: ${MY_APP_PREFIX}-cluster
          container_image_name_updates: container=${DOCKER_USERNAME}/${IMAGE_NAME},tag=${TAG}
          family: ${MY_APP_PREFIX}-service
          
workflows:
  build_and_deploy:
    jobs:
      - build-and-push
      - update-service:
          requires:
            - build-and-push
          
